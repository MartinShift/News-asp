@model List<News.DbModels.Todo>
@{
    Layout = "_Layout";
}
@section styles{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/air-datepicker@3.4.0/air-datepicker.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.27/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        .task-text.checked {
            text-decoration: line-through;
        }

        .task-time.checked {
            text-decoration: line-through;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/air-datepicker@3.4.0/air-datepicker.min.js"></script>
    
}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <h1>TODO List for @ViewData["SelectedDate"]</h1>
            <div class="row">
                <div class="col-md-4">
                    <div type="text" id="taskDatepicker" class="d-flex justify-content-center"> </div>
                </div>
                <div class="col-md-8">
                    <div class="input-group mb-3">
                        <input type="text" id="taskInput" class="form-control" placeholder="Add a new task" />
                        <button class="btn btn-primary" id="addTaskButton">Add</button>
                    </div>

                    <ul id="taskList" class="list-group">
                        @foreach (var todo in Model)
                        {
                            <li class="list-group-item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <span class="task-text" data-taskid="@todo.Id">@todo.Name</span>
                                        <input type="text" class="form-control task-input d-none" />
                                    </div>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input task-checkbox" type="checkbox" @if (todo.IsDone)
                                        {
                                            <text>checked</text>
                                        } />
                                    </div>
                                    <div>
                                        <span class="mr-2 task-time">@todo.Date.Value.ToString("HH:mm")</span>
                                    </div>
                                    <div>
                                        <input type="datetime-local" class="form-control task-datetime " />
                                </div>
                                    <div>
                                        <button class="btn btn-success save-task" data-taskid="@todo.Id">Save</button>
                                    </div>
                                    <div>
                                        <button class="btn btn-danger delete-task" data-taskid="@todo.Id">Delete</button>
                                    </div>
                                    
                                </div>
                            </li>
                        }
                    </ul>

                </div>
            </div>
        </div>
    </div>
   
  

    
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.0/dist/sweetalert2.all.min.js"></script>

    <script>
        $(document).ready(function () {
            new AirDatepicker('#taskDatepicker', {
                onSelect: function (formattedDate, date) {
                    console.log(formattedDate);
                    window.location.href = "/Todo/Index/" + formattedDate.formattedDate;
                }
            });

            $('#addTaskButton').click(function () {
                var taskName = $('#taskInput').val();
                const input = window.location.href;

                const parts = input.split('/');

                const lastPart = parts[parts.length - 1];

                const dateParts = lastPart.split('.');
                const day = parseInt(dateParts[0]);
                const month = parseInt(dateParts[1]) - 1; 
                const year = parseInt(dateParts[2]);
                const datet = new Date(year, month, day);
                console.log(day);
                console.log(month);
                console.log(year);
                var model = {
                    name: taskName,
                    date: datet,
                    isChecked: false,
                    userId:"",
                }
                console.log(model);
                fetch('/Todo/AddTask', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(model),
                })
                    .then(response => {
                        if (response.ok) {
                            window.location.reload();
                        } else {
                            throw new Error('Failed to add task');
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error', error.message, 'error');
                    });
            });
            $('.task-checkbox').each(function () {
                var $taskCheckbox = $(this);
                var $taskText = $taskCheckbox.closest('.list-group-item').find('.task-text');
                var $taskTime = $taskCheckbox.closest('.list-group-item').find('.task-time');

                if ($taskCheckbox.is(':checked')) {
                    $taskText.addClass('checked');
                    $taskTime.addClass('checked');
                }
            });
            $('#taskList').on('click', '.task-text', function () {
                var $taskText = $(this);
                var $taskInput = $taskText.siblings('.task-input');
                $taskText.addClass('d-none');
                $taskInput.removeClass('d-none');
                $taskInput.val($taskText.text());
                $taskInput.focus();
            });
            $('#taskList').on('blur', '.task-input', function () {
                var $taskInput = $(this);
                var $taskText = $taskInput.siblings('.task-text');
                $taskText.text($taskInput.val());
                $taskText.removeClass('d-none');
                $taskInput.addClass('d-none');
            });
            $('#taskList').on('change', '.task-checkbox', function () {
                var $taskCheckbox = $(this);
                var $taskText = $taskCheckbox.closest('.list-group-item').find('.task-text');
                var $taskTime = $taskCheckbox.closest('.list-group-item').find('.task-time');

                if ($taskCheckbox.is(':checked')) {
                    $taskText.addClass('checked');
                    $taskTime.addClass('checked');
                } else {
                    $taskText.removeClass('checked');
                    $taskTime.removeClass('checked');
                }
            });
            $('#taskList').on('click', '.save-task', function () {
                var taskId = $(this).data('taskid');
                var $taskText = $(this).closest('.list-group-item').find('.task-text');
                var $taskTime = $(this).closest('.list-group-item').find('.task-datetime');
                var $taskIsDone = $(this).closest('.list-group-item').find('.task-checkbox');
                var updatedTaskName = $taskText.text();
                var updatedTaskTime = $taskTime.val()
                if(updatedTaskTime == "")
                {
                    updatedTaskTime = null;
                }
                var updatedTaskIsDone = $taskIsDone.prop('checked');
                var updatedTask = {
                    Id: taskId,
                    Name: updatedTaskName,
                    Date: updatedTaskTime,
                    IsDone: updatedTaskIsDone,
                };
                console.log(updatedTask);
                fetch('/Todo/UpdateTask', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updatedTask),
                })
                    .then(response => {
                        if (response.ok) {
                            // Refresh the page after successful update
                            window.location.reload();
                        } else {
                            throw new Error('Failed to save task');
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error', error.message, 'error');
                    });
            });
            $('#taskList').on('click', '.delete-task', function () {
                var taskId = $(this).data('taskid');
                console.log(taskId);
                Swal.fire({
                    title: 'Confirm Deletion',
                    text: 'Are you sure you want to delete this task?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Delete'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/Todo/DeleteTask', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(taskId),
                        })
                            .then(response => {
                                if (response.ok) {
                                    window.location.reload();
                                } else {
                                    throw new Error('Failed to delete task');
                                }
                            })
                            .catch(error => {
                                Swal.fire('Error', error.message, 'error');
                            });
                    }
                });
            });

        });
    </script>
}
